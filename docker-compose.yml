version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: custom_restreamer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports: # <-- REMOVED: No need to expose the database to the internet.
    #   - "5432:5432"
    networks:
      - restreamer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.final
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/custom_restreamer
      PORT: 3001
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3000,https://hive.restreamer.website
      WEBHOOK_SECRET: your-secret-key
      JWT_SECRET: your-jwt-secret
      PUBLIC_HLS_URL: https://hive.restreamer.website/hls
    # ports: # <-- REMOVED: No need to expose the backend API directly.
    #   - "3001:3001"
    networks:
      - restreamer-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://hive.restreamer.website/api}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://hive.restreamer.website/ws}
      NEXT_PUBLIC_SRS_URL: ${NEXT_PUBLIC_SRS_URL:-https://hive.restreamer.website}
    # ports: # <-- REMOVED: No need to expose the frontend directly.
    #   - "3000:3000"
    networks:
      - restreamer-network
    depends_on:
      - backend
    restart: always

  # SRS (Simple Realtime Server)
  srs:
    image: ossrs/srs:5
    ports:
      - "1935:1935"  # RTMP
      - "8000:8000/udp" # WebRTC over UDP
    # Removed SRS HTTP/API ports, as they should be accessed via the Nginx proxy.
    networks:
      - restreamer-network
    restart: always

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.simple
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/sites:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro # <-- ADDED: Shared volume for Certbot challenges.
    networks:
      - restreamer-network
    depends_on:
      - frontend
      - backend
      - srs
    restart: always

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:rw # <-- ADDED: Certbot needs read-write access.

# Define top-level volumes and networks
volumes:
  postgres_data:
  srs_hls:
  srs_dvr:

networks: # <-- MOVED: This block must be at the bottom.
  restreamer-network:
    driver: bridge
