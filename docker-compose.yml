version: '3.8'

services:
  # Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: custom_restreamer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SRS (Simple Realtime Server) - Better than nginx-rtmp
  srs:
    image: ossrs/srs:5
    ports:
      - "1935:1935"  # RTMP
      - "8000:8000"  # WebRTC
      - "1985:1985"  # HTTP API
      - "8080:8080"  # HTTP
    volumes:
      - ./nginx/srs-minimal.conf:/usr/local/srs/conf/srs-minimal.conf
      - srs_hls:/var/www/hls
      - srs_dvr:/var/www/dvr
    environment:
      - SRS_LOG_LEVEL=info
      - CANDIDATE=${SRS_CANDIDATE:-127.0.0.1}
    command: ["./objs/srs", "-c", "conf/srs-minimal.conf"]

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.final
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/custom_restreamer
      PORT: 3001
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3000,https://hive.restreamer.website
      WEBHOOK_SECRET: your-secret-key
      JWT_SECRET: your-jwt-secret
      PUBLIC_HLS_URL: https://hive.restreamer.website/hls
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://hive.restreamer.website/api}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://hive.restreamer.website/ws}
      NEXT_PUBLIC_SRS_URL: ${NEXT_PUBLIC_SRS_URL:-https://hive.restreamer.website}
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # Nginx (HTTP reverse proxy for testing)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.simple
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  srs_hls:
  srs_dvr: